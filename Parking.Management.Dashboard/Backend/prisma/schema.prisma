// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model College {
  id         String   @id @default(uuid())
  name       String
  address    String
  city       String
  state      String?
  campus     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // FK keys relations
  user    User[]    @relation(name: "iUser")
  garage  Garage[]  @relation(name: "iGarage")
  vehicle Vehicle[] @relation(name: "iVehicle")
  course  Course[]  @relation(name: "iCourse")

  @@map("colleges")
}

model User {
  id          String     @id @default(uuid())
  name        String?
  password    String
  email       String     @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  rg          String     @unique
  cpf         String     @unique
  gender      Gender     @default(O)
  enrollment  String?
  status      Boolean    @default(false)
  birthdate   DateTime
  role        Role       @default(STUDENT)
  permissions Permission @default(DEFAULT)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  //FK keys relations
  garageEntry     Garage[] @relation(name: "iGarageEntry")
  garageDeparture Garage[] @relation(name: "iGarageDeparture")

  vehicle            Vehicle[]            @relation(name: "iVehicle")
  vehicleResponsible VehicleResponsible[] @relation(name: "iVehicleResponsible")
  college            College              @relation(name: "iUser", fields: [collegeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  collegeId          String
  course             Course               @relation(name: "iUser", fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseId           String

  @@map("users")
}

model Garage {
  id            String    @id @default(uuid())
  status        Status    @default(INSIDE)
  entryTime     DateTime
  departureTime DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  //FK keys relations
  userEntry   User   @relation(name: "iGarageEntry", fields: [userEntryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userEntryId String

  userDeparture   User?   @relation(name: "iGarageDeparture", fields: [userDepartureId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userDepartureId String?

  college   College @relation(name: "iGarage", fields: [collegeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  collegeId String

  vehicle   Vehicle @relation(name: "iGarage", fields: [vehicleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicleId String

  @@map("garage")
}

model Vehicle {
  id         String      @id @default(uuid())
  model      String
  color      String      @default("N/A")
  brand      String      @default("N/A")
  type       VehicleType @default(AUTOMOBILE)
  plate      String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  //FK keys relations
  user   User   @relation(name: "iVehicle", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId String

  college   College @relation(name: "iVehicle", fields: [collegeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  collegeId String

  garage Garage[] @relation(name: "iGarage")

  vehicleResponsible VehicleResponsible[] @relation(name: "iVehicleResponsible")
  VehicleNote        VehicleNote[]        @relation(name: "iVehicleNote")

  @@map("vehicles")
}

model VehicleResponsible {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //FK keys relations
  user   User   @relation(name: "iVehicleResponsible", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId String

  vehicle   Vehicle @relation(name: "iVehicleResponsible", fields: [vehicleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicleId String

  @@map("vehicle_responsibles")
}

model VehicleNote {
  id          String   @id @default(uuid())
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  //FK keys relations
  vehicle   Vehicle @relation(name: "iVehicleNote", fields: [vehicleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehicleId String

  @@map("vehicle_notes")
}

model Course {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //FK keys relations
  college   College @relation(name: "iCourse", fields: [collegeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  collegeId String

  user User[] @relation(name: "iUser")

  @@map("courses")
}

enum Role {
  STUDENT
  EMPLOYEE
}

enum Permission {
  DEFAULT
  ADMIN
}

enum Status {
  INSIDE
  OUTSIDE
  STOLEN
}

enum Gender {
  M
  F
  O
}

enum VehicleType {
  AUTOMOBILE
}
